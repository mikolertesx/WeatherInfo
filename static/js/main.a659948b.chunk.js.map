{"version":3,"sources":["store/reducer.js","store/actionTypes.js","util/status.js","util/weatherIcons.js","util/api.js","components/WeatherCard.js","components/HereCard.js","store/actions.js","App.js","index.js"],"names":["initialState","loc","lat","long","date","Date","store","createStore","state","action","type","status","UNSTARTED","LOADING","ERROR","READY","weatherIcons","weatherAbbreviations","Object","keys","forEach","key","newResult","baseUrl","composeUrl","base","ext","getLocation","latt","a","composedUrl","Axios","get","location","data","getLocationData","woeid","locationData","WeatherCard","props","useState","Status","currentStatus","setCurrentStatus","locationString","setLocationString","weather","setWeather","temperatureString","setTemperatureString","clickPosition","navigator","geolocation","getCurrentPosition","geoLocation","coords","latitude","longitude","onLocationChange","locations","currentWeather","maxTemp","minTemp","temp","title","console","log","error","picture","iconOrQuestion","src","alt","className","onStarted","style","textAlign","marginTop","onClick","onReady","connect","getDate","getMonth","getFullYear","dispatch","newLocation","onDateChange","newDate","App","LocationStore","HereCard","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a659948b.chunk.js","sourcesContent":["import { SET_LOCATION, SET_DATE } from \"./actionTypes\";\r\nimport { setLocation, setDate } from \"./actions\";\r\nimport { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n  loc: {\r\n    lat: null,\r\n    long: null,\r\n  },\r\n  date: new Date(),\r\n}\r\n\r\nfunction location(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_LOCATION:\r\n      return {...state, loc: action.loc};\r\n    case SET_DATE:\r\n      return {...state, date: action.date};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(location);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    location: state.loc,\r\n    date: `${state.date.getDate()}/${state.date.getMonth()+1}/${state.date.getFullYear()}`,\r\n    //state.date.toTimeString()\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onLocationChange: newLocation => {\r\n      dispatch(setLocation(newLocation));\r\n    },\r\n    onDateChange: newDate => {\r\n      dispatch(setDate(newDate));\r\n    }\r\n  }\r\n}\r\n\r\nexport {store as LocationStore, mapStateToProps, mapDispatchToProps};","const SET_LOCATION = 'SET_LOCATION';\r\nconst SET_DATE = 'SET_DATE';\r\n\r\nexport {SET_LOCATION, SET_DATE}","const status = {\r\n  UNSTARTED: 'UNSTARTED',\r\n  LOADING: 'LOADING',\r\n  ERROR: 'ERROR',\r\n  READY: 'READY',\r\n}\r\n\r\nexport default status;","const weatherIcons = {\r\n  'Snow': 'sn',\r\n  'Sleet': 'sl',\r\n  'Hail': 'h',\r\n  'Thunderstorm':'t',\r\n  'Heavy Rain': 'hr',\r\n  'Light Rain': 'lr',\r\n  'Showers': 's',\r\n  'Heavy Cloud': 'hc',\r\n  'Light Cloud': 'lc',\r\n  'Clear': 'c',\r\n}\r\n\r\nconst weatherAbbreviations = {};\r\n\r\nObject.keys(weatherIcons).forEach((key) => {\r\n  const newKey = weatherIcons[key];\r\n  const newResult = key;\r\n  weatherAbbreviations[newKey] = newResult;\r\n});\r\n\r\nexport {\r\n  weatherIcons,\r\n  weatherAbbreviations,\r\n};","import Axios from 'axios';\r\nimport { weatherIcons } from './weatherIcons';\r\n\r\nconst baseUrl = 'https://www.metaweather.com/api';\r\n// let currentLocation = null;\r\n\r\nconst composeUrl = (base, ext) => {\r\n  return `${base}/${ext}`;\r\n}\r\n\r\nconst getLocation = async (latt, long) => {\r\n  const composedUrl = composeUrl(baseUrl, `location/search/?lattlong=${latt},${long}`);\r\n\r\n  const location = await Axios.get(composedUrl);\r\n  // console.log(location);\r\n\r\n  // Closest place by distance.\r\n  return location.data;\r\n}\r\n\r\nconst getLocationData = async(woeid) => {\r\n  const composedUrl = composeUrl(baseUrl, `location/${woeid}`);\r\n  const locationData = await Axios.get(composedUrl);\r\n  return locationData.data;\r\n}\r\n\r\nconst getLocationDataDay = async(woeid, date) => {\r\n  const year = date.getUTCFullYear();\r\n  const month = date.getUTCMonth() + 1;\r\n  const day = date.getUTCDay();\r\n  const composedUrl = composeUrl(baseUrl, `location/${woeid}/${year}/${month}/${day}`);\r\n  const location = await Axios.get(composedUrl);\r\n  return location.data;\r\n}\r\n\r\nconst getImageSource = (picture) => {\r\n  return `https://www.metaweather.com/static/img/weather/png/64/${picture}.png`;\r\n}\r\n\r\nconst getImageSourceFromName = (picture) => {\r\n  return `https://www.metaweather.com/static/img/weather/png/64/${weatherIcons[picture]}.png`;\r\n}\r\n\r\nexport {\r\n  getLocation,\r\n  getLocationData,\r\n  getLocationDataDay,\r\n  getImageSource,\r\n  getImageSourceFromName,\r\n}","import React, { useState } from \"react\";\r\n\r\nimport Status from \"../util/status\";\r\nimport { getImageSourceFromName, getLocationData } from \"../util/api\";\r\n\r\nimport { getLocation } from \"../util/api\";\r\n\r\nimport \"./weatherCard.css\";\r\n\r\nconst WeatherCard = (props) => {\r\n  const [currentStatus, setCurrentStatus] = useState(Status.UNSTARTED);\r\n  const [locationString, setLocationString] = useState(null);\r\n  const [weather, setWeather] = useState(null);\r\n  const [temperatureString, setTemperatureString] = useState(null);\r\n\r\n  const clickPosition = async () => {\r\n    setCurrentStatus(Status.LOADING);\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (geoLocation) => {\r\n        const lat = geoLocation.coords.latitude;\r\n        const long = geoLocation.coords.longitude;\r\n\r\n        props.onLocationChange({\r\n          lat,\r\n          long,\r\n        });\r\n\r\n        try {\r\n          const locations = await getLocation(lat, long);\r\n          const location = locations[0];\r\n          const locationData = await getLocationData(location[\"woeid\"]);\r\n\r\n          const currentWeather = locationData[\"consolidated_weather\"][0];\r\n\r\n          const maxTemp = currentWeather[\"max_temp\"];\r\n          const minTemp = currentWeather[\"min_temp\"];\r\n          const temp = currentWeather[\"the_temp\"];\r\n\r\n          setLocationString(`${location.title} by approximation.`);\r\n          setWeather(currentWeather[\"weather_state_name\"]);\r\n          setTemperatureString(`${minTemp}° > ${temp}° < ${maxTemp}°`);\r\n          setCurrentStatus(Status.READY);\r\n        } catch (error) {\r\n          setCurrentStatus(Status.ERROR);\r\n          console.log(error);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n        setCurrentStatus(Status.ERROR);\r\n      }\r\n    );\r\n  };\r\n\r\n  let location = \"Unknown location\";\r\n  if (props.location.lat && props.location.long) {\r\n    location = `${props.location.lat}, ${props.location.long}`;\r\n  }\r\n  if (locationString !== null) {\r\n    location = locationString;\r\n  }\r\n\r\n  let iconOrQuestion = weather ? (\r\n    <img\r\n      src={getImageSourceFromName(weather)}\r\n      alt=\"Unknown Status\"\r\n      className=\"weather-img\"\r\n    />\r\n  ) : (\r\n    <div className=\"empty-div\">\r\n      <h1>?</h1>\r\n    </div>\r\n  );\r\n\r\n  const onStarted = (\r\n    <div className=\"weather-card\">\r\n      <h1 style={{textAlign: 'center', marginTop: '12px'}}>How hot is where I am right now?</h1>\r\n      <div className=\"weather-presentation\">\r\n        <div className=\"empty-div\">\r\n          <h1>?</h1>\r\n        </div>\r\n      </div>\r\n      <button onClick={clickPosition}>Use my location</button>\r\n    </div>\r\n  );\r\n\r\n  const onReady = (\r\n    <div className=\"weather-card\">\r\n      <div className=\"weather-info\">\r\n        <p className=\"weather-location\">{location}</p>\r\n        <p className=\"weather-date\">{props.date}</p>\r\n        <p className=\"weather-type\">{weather || \"Unknown weather\"}</p>\r\n      </div>\r\n      <div className=\"weather-presentation\">\r\n        {iconOrQuestion}\r\n        <p className=\"weather-temperature\">\r\n          {temperatureString || \"Unknown temperature\"}\r\n        </p>\r\n      </div>\r\n      <button onClick={clickPosition}>Use my location</button>\r\n    </div>\r\n  );\r\n\r\n  const onWaiting = (\r\n    <div className=\"weather-card weather-loading\">\r\n      <div className=\"loader\">Loading...</div>\r\n    </div>\r\n  );\r\n\r\n  const onError = (\r\n    <div className=\"weather-card weather-wrong\">\r\n      <p className=\"weather-wrong\">Something went wrong...</p>\r\n      <button onClick={clickPosition}>Try Again</button>\r\n    </div>\r\n  );\r\n\r\n  return currentStatus === Status.UNSTARTED\r\n    ? onStarted\r\n    : currentStatus === Status.READY\r\n    ? onReady\r\n    : currentStatus === Status.LOADING\r\n    ? onWaiting\r\n    : onError;\r\n};\r\n\r\nexport default WeatherCard;\r\n","import WeatherCard from \"./WeatherCard\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../store/reducer\";\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherCard);\r\n","import {SET_LOCATION, SET_DATE} from './actionTypes';\r\n\r\nfunction setLocation(location) {\r\n  return {\r\n    type: SET_LOCATION,\r\n    loc: {\r\n      lat: location.lat,\r\n      long: location.long,\r\n    }\r\n  }\r\n}\r\n\r\nfunction setDate(date) {\r\n  return {\r\n    type: SET_DATE,\r\n    date: date,\r\n  }\r\n}\r\n\r\nexport {setLocation, setDate}","import React from \"react\";\r\nimport {\r\n  LocationStore,\r\n} from \"./store/reducer\";\r\n\r\nimport {Provider} from 'react-redux';\r\nimport HereCard from \"./components/HereCard\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Provider store={LocationStore}>\r\n      <HereCard />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n// default connect(mapStateToProps, mapDispatchToProps)(App)\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}